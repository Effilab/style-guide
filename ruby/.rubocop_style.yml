Style/Alias:
  Enabled: true
  EnforcedStyle: prefer_alias_method

Style/AndOr:
  Enabled: true
  EnforcedStyle: always

Style/ArrayJoin:
  Enabled: true

Style/AsciiComments:
  Enabled: true

Style/Attr:
  Enabled: true

Style/AutoResourceCleanup:
  Enabled: false

Style/BarePercentLiterals:
  Enabled: false

Style/BeginBlock:
  Enabled: true

Style/BlockComments:
  Enabled: true

Style/BlockDelimiters:
  Enabled: true
  EnforcedStyle: braces_for_chaining

Style/BracesAroundHashParameters:
  Enabled: true
  EnforcedStyle: context_dependent

Style/CaseEquality:
  Enabled: false

Style/CharacterLiteral:
  Enabled: true

Style/ClassAndModuleChildren:
  Enabled: false
  EnforcedStyle: nested

Style/ClassCheck:
  Enabled: false

Style/ClassMethods:
  Enabled: true

Style/ClassVars:
  Enabled: true

Style/CollectionMethods:
  Enabled: true
 # Mapping from undesired method to desired_method
 # e.g. to use `detect` over `find`:
 #
 # CollectionMethods:
 #   PreferredMethods:
 #     find: detect
  PreferredMethods:
    collect: 'map'
    collect!: 'map!'
    inject: 'reduce'
    detect: 'find'
    find_all: 'select'

Style/ColonMethodCall:
  Enabled: true

Style/CommandLiteral:
  Enabled: true
  EnforcedStyle: mixed
  AllowInnerBackticks: true

Style/CommentAnnotation:
  Enabled: true
  Keywords:
    - 'TODO'
    - 'FIXME'
    - 'OPTIMIZE'
    - 'HACK'
    - 'REVIEW'

Style/ConditionalAssignment:
  Enabled: false

Style/Copyright:
  Enabled: false

Style/DefWithParentheses:
  Enabled: true

Style/Documentation:
  Enabled: false

Style/DocumentationMethod:
  Enabled: false
  RequireForNonPublicMethods: false

Style/DoubleNegation:
  Enabled: true

Style/EachForSimpleLoop:
  Enabled: true

Style/EachWithObject:
  Enabled: true

Style/EmptyCaseCondition:
  Enabled: true

Style/EmptyElse:
  Enabled: true
  EnforcedStyle:	both

Style/EmptyLiteral:
  Enabled: true

Style/EmptyMethod:
 Enabled: false
 EnforcedStyle: expanded

Style/Encoding:
  Enabled: false

Style/EndBlock:
  Enabled: true

Style/EvenOdd:
  Enabled: true

Style/FlipFlop:
  Enabled: true

Style/For:
  Enabled: true
  EnforcedStyle: each

Style/FormatString:
  Enabled: true
  EnforcedStyle: format

Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: when_needed

Style/GlobalVars:
  Enabled: true
  AllowedVariables: [$quiet, $shutdown]

Style/GuardClause:
  Enabled: false
  MinBodyLength: 1

Style/HashSyntax:
  Enabled: true
  EnforcedStyle: ruby19_no_mixed_keys
  # Force hashes that have a symbol value to use hash rockets
  UseHashRocketsWithSymbolValues: false
  # Do not suggest { a?: 1 } over { :a? => 1 } in ruby19 style
  PreferHashRocketsForNonAlnumEndingSymbols: false

Style/IdenticalConditionalBranches:
  Enabled: true

Style/IfInsideElse:
  Enabled: true

Style/IfUnlessModifier:
  Enabled: true
  MaxLineLength: 120

Style/IfUnlessModifierOfIfUnless:
  Enabled: true

Style/IfWithSemicolon:
  Enabled: false

Style/ImplicitRuntimeError:
  Enabled: true

Style/InfiniteLoop:
  Enabled: true

Style/InlineComment:
  Enabled: false

Style/Lambda:
  Enabled: true
  EnforcedStyle: literal

Style/LambdaCall:
  Enabled: true
  EnforcedStyle: call

Style/LineEndConcatenation:
  Enabled: true

Style/MethodCallWithArgsParentheses:
  Enabled: false

Style/MethodCallWithoutArgsParentheses:
  Enabled: true

Style/MethodCalledOnDoEndBlock:
  Enabled: false

Style/MethodDefParentheses:
  Enabled: true

Style/MethodMissing:
  Enabled: true

Style/MissingElse:
  Enabled: false

Style/ModuleFunction:
  Enabled: true

Style/MultilineBlockChain:
  Enabled: true

Style/MultilineIfModifier:
  Enabled: true

Style/MultilineIfThen:
  Enabled: true

Style/MultilineMemoization:
  Enabled: false

Style/MultilineTernaryOperator:
  Enabled: true

Style/MutableConstant:
  Enabled: true

Style/NegatedIf:
  Enabled: true

Style/NegatedWhile:
  Enabled: true

Style/NestedModifier:
  Enabled: true

Style/NestedParenthesizedCalls:
  Enabled: true

Style/NestedTernaryOperator:
  Enabled: true

Style/Next:
  Enabled: true
  EnforcedStyle: skip_modifier_ifs
  MinBodyLength: 3

Style/NilComparison:
  Enabled: true

Style/NonNilCheck:
  Enabled: true
  IncludeSemanticChanges: false

Style/Not:
  Enabled: true

Style/NumericLiteralPrefix:
  Enabled: true
  EnforcedOctalStyle: zero_with_o

Style/NumericLiterals:
  Enabled: true
  MinDigits: 5

Style/NumericPredicate:
  Enabled: true
  EnforcedStyle: predicate
  Exclude:
    - 'spec/**/*'

Style/OneLineConditional:
  Enabled: true

Style/OptionHash:
  Enabled: false

Style/OptionalArguments:
  Enabled: true

Style/ParallelAssignment:
  Enabled: true

Style/ParenthesesAroundCondition:
  Enabled: true
  AllowSafeAssignment: false

Style/PercentLiteralDelimiters:
  Enabled: true
  PreferredDelimiters:
    '%':  ()
    '%i': ()
    '%I': ()
    '%q': ()
    '%Q': ()
    '%r': ()
    '%s': ()
    '%w': ()
    '%W': ()
    '%x': ()

Style/PercentQLiterals:
  Enabled: true

Style/PerlBackrefs:
  Enabled: true

Style/PreferredHashMethods:
  Enabled: true
  EnforcedStyle: short

Style/Proc:
  Enabled: true

Style/RaiseArgs:
  Enabled: true
  EnforcedStyle: exploded

Style/RedundantBegin:
  Enabled: true

Style/RedundantException:
  Enabled: true

Style/RedundantFreeze:
  Enabled: true

Style/RedundantParentheses:
  Enabled: true

Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: false

Style/RedundantSelf:
  Enabled: true

Style/RegexpLiteral:
  Enabled: false

Style/RescueModifier:
  Enabled: true

Style/SafeNavigation:
  Enabled: true
  ConvertCodeThatCanStartToReturnNil: false

Style/SelfAssignment:
  Enabled: true

Style/Semicolon:
  Enabled: true
  # Allow ; to separate several expressions on the same line.
  AllowAsExpressionSeparator: false

Style/Send:
  Enabled: false

Style/SignalException:
  Enabled: true
  EnforcedStyle: only_raise

Style/SingleLineBlockParams:
  Enabled: false

Style/SingleLineMethods:
  Enabled: true
  AllowIfMethodIsEmpty: true

Style/SpecialGlobalVars:
  Enabled: true
  EnforcedStyle: use_english_names

Style/StabbyLambdaParentheses:
  Enabled: true
  EnforcedStyle: require_parentheses

Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes
  ConsistentQuotesInMultiline: false

Style/StringLiteralsInInterpolation:
  Enabled: true
  EnforcedStyle: double_quotes

Style/StringMethods:
  Enabled: true
  # Mapping from undesired method to desired_method
  # e.g. to use `to_sym` over `intern`:
  #
  # StringMethods:
  #   PreferredMethods:
  #     intern: to_sym
  PreferredMethods:
    intern: to_sym

Style/StructInheritance:
  Enabled: true

Style/SymbolArray:
  Enabled: true
  EnforcedStyle: percent

Style/SymbolLiteral:
  Enabled: true

Style/SymbolProc:
  Enabled: true

Style/TernaryParentheses:
  Enabled: false

Style/TrailingCommaInArguments:
  Enabled: true
  EnforcedStyleForMultiline: no_comma

Style/TrailingCommaInLiteral:
  Enabled: true
  EnforcedStyleForMultiline: comma

Style/TrailingUnderscoreVariable:
  Enabled: true
  AllowNamedUnderscoreVariables: true

Style/TrailingUnderscoreVariable:
  Enabled: false

Style/TrivialAccessors:
  Enabled: true
  # When set to false the cop will suggest the use of accessor methods
  # in situations like:
  #
  # def name
  #   @other_name
  # end
  #
  # This way you can uncover "hidden" attributes in your code.
  ExactNameMatch: true
  AllowPredicates: true
  # Allows trivial writers that don't end in an equal sign. e.g.
  #
  # def on_exception(action)
  #   @on_exception=action
  # end
  # on_exception :restart
  #
  # Commonly used in DSLs
  AllowDSLWriters: false
  IgnoreClassMethods: false
  Whitelist:
    - to_ary
    - to_a
    - to_c
    - to_enum
    - to_h
    - to_hash
    - to_i
    - to_int
    - to_io
    - to_open
    - to_path
    - to_proc
    - to_r
    - to_regexp
    - to_str
    - to_s
    - to_sym

Style/UnlessElse:
  Enabled: true

Style/UnneededCapitalW:
  Enabled: true

Style/UnneededInterpolation:
  Enabled: true

Style/UnneededPercentQ:
  Enabled: true

Style/VariableInterpolation:
  Enabled: true

Style/WhenThen:
  Enabled: true

Style/WhileUntilDo:
  Enabled: true

Style/WhileUntilModifier:
  Enabled: true
  MaxLineLength: 120

Style/WordArray:
  Enabled: true
  EnforcedStyle: percent
  # The MinSize option causes the WordArray rule to be ignored for arrays
  # smaller than a certain size.  The rule is only applied to arrays
  # whose element count is greater than or equal to MinSize.
  MinSize: 1

Style/ZeroLengthPredicate:
  Enabled: true
